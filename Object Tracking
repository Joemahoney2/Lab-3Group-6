#import the necessary packages
from collections import deque
from imutils.video import VideoStream
import numpy as np
import argparse
import cv2
import imutils
import time

### Setup ########################################################

#Construct the argument parse and parse the arguments
ap  = argparse.ArgumentParser()
ap.add_argument("-v", "--video", help="path to the (optional) video file")
ap.add_argument("-b", "--buffer", type=int, default=64, help="max buffer size")
args = vars(ap.parse_args())

#Define upper and lower bounds of color target and start buffer
colorLower = (110,50,50)
colorUpper = (130,255,255)
pts = deque(maxlen=args["buffer"])

#if a video path is not supplied, default to webcam
if not args.get("video", False):
    vs = VideoStream(src=0).start()
#otherwise grab refernce to video file
else:
    vs = cv2.VideoCapture(args["video"])
#allow  camera/video to warm up
time.sleep(2.0)

### loop ########################################################

#keep looping
while True:
    #grab current frame
    frame = vs.read()
    #handle the fram from vidcap or vistream
    frame = frame[1] if args.get("video", False) else frame
    #if we dont get a frame, end of video
    if frame is None:
        break
    
    #resize the frame, blur, and convert to HSV color
    frame = imutils.resize(frame, width=600)
    blurred = cv2.GaussianBlur(frame, (11,11), 0)
    hsv = cv2.cvtColor(blurred, cv2.COLOR_BGR2HSV)
    
    #construct mask for color and use dilations&ersosions to reduce small noises
    mask = cv2.inRange(hsv, colorLower, colorUpper)
    mask = cv2.erode(mask, None, iterations=2)
    mask = cv2.dilate(mask, None, iterations=2)
    
### Contour Draw ################################################
    #find countours in mask and find center(x,y) of the object
    cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    cnts = cnts[0] if imutils.is_cv2() else cnts[1]
    center = None
    
    #only proceed is at least one contour was found
    if len(cnts) > 0:
        #find larget contour in mask, use it to compute min circle and center
        c = max(cnts, key=cv2.contourArea)
        ((x,y), radius) = cv2.minEnclosingCircle(c)
        M = cv2.moments(c)
        center = (int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"]))
        
        #only proceed if the radius meets a minimum size
        if radius > 10:
            #draw circle and center on from and update trakced points
            cv2.circle(frame, (int(x), int(y)), int(radius), (0,255,255), 2)
            cv2.circle(frame, center, 5, (0,0,255), -1)
            
    #update the points queue
    pts.appendleft(center)
    
    #loop over the set of tracked points
    for i in range(1, len(pts)):
        #if any tracked poitns are none, ignore them
        if pts[i-1] is None or pts[i] is None:
            continue
        #otherwise, compute thickness of line and draw lines
        thickness = int(np.sqrt(args["buffer"] / float(i+1))*2.5)
        cv2.line(frame, pts[i-1], pts[i], (0,0,255), thickness)
        
    #display frame to screen
    cv2.imshow("Frame", frame)
    key = cv2.waitKey(1) & 0xFF
    #if the 'q' key pressed, stop
    if key == ord("q"):
        break

### Ending #########################################################3
    
#if not using a video file, stop cam video stream
if not args.get("video", False):
    vs.stop()
#otherwise release cam
else:
    vs.release()
#close all windows
cv2.destroyAllWindows()       
